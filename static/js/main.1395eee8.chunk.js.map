{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","noSort","sortType","setSortType","isReverseGoods","setIsReverseGoods","sortedGoods","goods","preparedGoods","byLength","byName","sort","good1","good2","length","localeCompare","reverse","sortGoods","isSortedByLength","isSortedByName","isSortingOrReversingActive","handleSortTypeChange","sortTypeValue","className","type","classnames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,UAAAA,E,kBAAAA,E,yBAAAA,M,KAML,IA+BaE,EAAM,WACjB,MAAgCC,mBAASH,EAASI,QAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4CH,oBAAS,GAArD,mBAAOI,EAAP,KAAuBC,EAAvB,KAEMC,EAnCU,SAChBC,EACAL,EACAE,GAEA,GAAIF,IAAaL,EAASI,SAAWG,EACnC,OAAOG,EAGT,IAAMC,EAAa,YAAOD,GAmB1B,OAjBIL,IAAaL,EAASY,UAAYP,IAAaL,EAASa,QAC1DF,EAAcG,MAAK,SAACC,EAAOC,GACzB,OAAQX,GACN,KAAKL,EAASY,SACZ,OAAOG,EAAME,OAASD,EAAMC,OAC9B,KAAKjB,EAASa,OACZ,OAAOE,EAAMG,cAAcF,GAC7B,QACE,OAAO,MAKXT,GACFI,EAAcQ,UAGTR,EAOaS,CAClBnB,EACAI,EACAE,GAGIc,EAAmBhB,IAAaL,EAASY,SACzCU,EAAiBjB,IAAaL,EAASa,OACvCU,EAA6BlB,GAAYE,EAOzCiB,EAAuB,SAACC,GAC5BnB,EAAYmB,IAOd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYN,IAEhBO,QAAS,kBAAML,EAAqBxB,EAASa,SAP/C,iCAYA,wBACEc,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYP,IAEhBQ,QAAS,kBAAML,EAAqBxB,EAASY,WAP/C,4BAYA,wBACEe,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAarB,IAEjBsB,QAtCoB,WAC1BrB,GAAmBD,IA8Bf,qBAWCgB,GACC,wBACEI,KAAK,SACLD,UAAU,4BACVG,QAvDgB,WACxBrB,GAAkB,GAClBF,EAAYN,EAASI,SAkDf,sBAUJ,6BACGK,EAAYqB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCrIjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1395eee8.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport classnames from 'classnames';\n\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  noSort = '',\n  byLength = 'length',\n  byName = 'alphabetically',\n}\n\nconst sortGoods = (\n  goods: string[],\n  sortType: SortType,\n  isReverseGoods: boolean,\n) => {\n  if (sortType === SortType.noSort && !isReverseGoods) {\n    return goods;\n  }\n\n  const preparedGoods = [...goods];\n\n  if (sortType === SortType.byLength || sortType === SortType.byName) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.byLength:\n          return good1.length - good2.length;\n        case SortType.byName:\n          return good1.localeCompare(good2);\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverseGoods) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortType, setSortType] = useState(SortType.noSort);\n  const [isReverseGoods, setIsReverseGoods] = useState(false);\n\n  const sortedGoods = sortGoods(\n    goodsFromServer,\n    sortType,\n    isReverseGoods,\n  );\n\n  const isSortedByLength = sortType !== SortType.byLength;\n  const isSortedByName = sortType !== SortType.byName;\n  const isSortingOrReversingActive = sortType || isReverseGoods;\n\n  const hanldeButtonReset = () => {\n    setIsReverseGoods(false);\n    setSortType(SortType.noSort);\n  };\n\n  const handleSortTypeChange = (sortTypeValue: SortType) => {\n    setSortType(sortTypeValue);\n  };\n\n  const hanldeButtonReverse = () => {\n    setIsReverseGoods(!isReverseGoods);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classnames(\n            'button',\n            'is-info',\n            { 'is-light': isSortedByName },\n          )}\n          onClick={() => handleSortTypeChange(SortType.byName)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames(\n            'button',\n            'is-success',\n            { 'is-light': isSortedByLength },\n          )}\n          onClick={() => handleSortTypeChange(SortType.byLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReverseGoods },\n          )}\n          onClick={hanldeButtonReverse}\n        >\n          Reverse\n        </button>\n        {isSortingOrReversingActive && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={hanldeButtonReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}